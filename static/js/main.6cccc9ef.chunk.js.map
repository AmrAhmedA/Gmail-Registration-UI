{"version":3,"sources":["images/google_PNG19644.png","images/account.svg","components/input.jsx","components/registerForm.jsx","components/form.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Input","props","label","name","value","id","helperText","placeholder","onChange","rest","Fragment","FormControl","fullWidth","TextField","variant","size","initialFieldValues","firstname","secondname","email","username","password","confirmpassword","showPassword","withWidth","useState","values","setValues","handleInputChange","input","currentTarget","handleSubmit","e","preventDefault","console","log","handleClickShowPassword","handleMouseDownPassword","event","renderInput","type","Form","makeStyles","theme","root","flexGrow","display","flexWrap","padding","spacing","width","margin","marginBottom","marginLogo","useStyles","Container","fixed","maxWidth","Paper","elevation","className","onSubmit","Grid","container","item","xs","src","GoogleLogo","alt","direction","justify","alignItems","sm","md","lg","xl","InputProps","endAdornment","InputAdornment","position","Button","disableElevation","disableRipple","href","style","textTransform","textAlign","fontSize","color","IconButton","height","aria-label","onClick","onMouseDown","Hidden","smDown","align","AccountLogo","App","minHeight","setTimeout","bind","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.6cccc9ef.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/google_PNG19644.10cdc2cf.png\";","module.exports = __webpack_public_path__ + \"static/media/account.f766a72d.svg\";","import React from \"react\";\r\nimport { TextField } from \"@material-ui/core\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\n\r\nconst Input = (props) => {\r\n  const {\r\n    label,\r\n    name,\r\n    value,\r\n    id,\r\n    helperText,\r\n    placeholder,\r\n    onChange,\r\n    ...rest\r\n  } = props;\r\n  return (\r\n    <React.Fragment>\r\n      <FormControl fullWidth>\r\n        <TextField\r\n          {...rest}\r\n          variant=\"outlined\"\r\n          size=\"small\"\r\n          id={id}\r\n          name={name}\r\n          value={value}\r\n          label={label}\r\n          placeholder={placeholder}\r\n          helperText={\"\" || helperText}\r\n          onChange={onChange}\r\n        />\r\n      </FormControl>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Input;\r\n","import React from \"react\";\r\nimport {\r\n  Grid,\r\n  IconButton,\r\n  InputAdornment,\r\n  Button,\r\n  Hidden,\r\n  withWidth,\r\n  Paper,\r\n  Container,\r\n} from \"@material-ui/core\";\r\nimport Visibility from \"@material-ui/icons/Visibility\";\r\nimport VisibilityOff from \"@material-ui/icons/VisibilityOff\";\r\nimport PropTypes from \"prop-types\";\r\nimport GoogleLogo from \"../images/google_PNG19644.png\";\r\nimport AccountLogo from \"../images/account.svg\";\r\nimport { Form, UseStyle } from \"./form\";\r\nimport Input from \"./input\";\r\n\r\nconst initialFieldValues = {\r\n  id: 0,\r\n  firstname: \"\",\r\n  secondname: \"\",\r\n  email: \"\",\r\n  username: \"\",\r\n  password: \"\",\r\n  confirmpassword: \"\",\r\n  showPassword: false,\r\n};\r\n\r\nconst RegisterForm = () => {\r\n  const {\r\n    values,\r\n    handleInputChange,\r\n    handleSubmit,\r\n    handleClickShowPassword,\r\n    handleMouseDownPassword,\r\n    renderInput,\r\n  } = Form(initialFieldValues);\r\n\r\n  const { root, margin, marginBottom, marginLogo } = UseStyle();\r\n\r\n  return (\r\n    // <Paper className={root}>\r\n    <Container fixed maxWidth=\"md\">\r\n      <Paper variant=\"outlined\" elevation={2}>\r\n        <form className={root} onSubmit={handleSubmit}>\r\n          <Grid container>\r\n            <Grid item xs={12} className={marginLogo}>\r\n              <img src={GoogleLogo} alt=\"GoogleLogo\" width=\"80px\"></img>\r\n            </Grid>\r\n            <h4 className={marginBottom}>Create your Google Account</h4>\r\n          </Grid>\r\n          <Grid container direction=\"row\" justify=\"center\" alignItems=\"center\">\r\n            <Grid item xs={12} sm={12} md={6} lg={6} xl={6}>\r\n              <Grid container spacing={3}>\r\n                <Grid item xs={12} sm={6} md={6} lg={6} xl={6}>\r\n                  {renderInput(\r\n                    \"firstname\",\r\n                    \"firstname\",\r\n                    \"First name\",\r\n                    \"text\",\r\n                    \"\"\r\n                  )}\r\n                </Grid>\r\n                <Grid item xs={12} sm={6} md={6} lg={6} xl={6}>\r\n                  {renderInput(\r\n                    \"secondname\",\r\n                    \"secondname\",\r\n                    \"Last name\",\r\n                    \"text\",\r\n                    \"\"\r\n                  )}\r\n                </Grid>\r\n                <Grid item xs={12} sm={12} md={12} lg={12} xl={12}>\r\n                  <Input\r\n                    InputProps={{\r\n                      endAdornment: (\r\n                        <InputAdornment position=\"end\">\r\n                          @gmail.com\r\n                        </InputAdornment>\r\n                      ),\r\n                    }}\r\n                    id=\"username\"\r\n                    name=\"username\"\r\n                    label=\"Username\"\r\n                    type=\"text\"\r\n                    helperText=\"You can use letters, numbers &amp; periods\"\r\n                    value={values.username}\r\n                    onChange={handleInputChange}\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                  <Button\r\n                    disableElevation\r\n                    disableRipple\r\n                    href=\"#text-buttons\"\r\n                    style={{\r\n                      textTransform: \"none\",\r\n                      textAlign: \"center\",\r\n                      fontSize: \"13px\",\r\n                    }}\r\n                    color=\"primary\"\r\n                  >\r\n                    Use my current email address instead\r\n                  </Button>\r\n                </Grid>\r\n                <Grid item xs={12} sm={5} md={5} lg={5} xl={5}>\r\n                  {renderInput(\r\n                    \"password\",\r\n                    \"password\",\r\n                    \"Password\",\r\n                    values.showPassword ? \"text\" : \"password\",\r\n                    \"\"\r\n                  )}\r\n                </Grid>\r\n                <Grid item xs={12} sm={5} md={5} lg={5} xl={5}>\r\n                  {renderInput(\r\n                    \"confirmpassword\",\r\n                    \"confirmpassword\",\r\n                    \"Confirm\",\r\n                    values.showPassword ? \"text\" : \"password\",\r\n                    \"\"\r\n                  )}\r\n                </Grid>\r\n                <Grid item xs={2}>\r\n                  <IconButton\r\n                    style={{\r\n                      height: \"35px\",\r\n                    }}\r\n                    aria-label=\"toggle password visibility\"\r\n                    onClick={handleClickShowPassword}\r\n                    onMouseDown={handleMouseDownPassword}\r\n                  >\r\n                    {values.showPassword ? <Visibility /> : <VisibilityOff />}\r\n                  </IconButton>\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                  <Grid\r\n                    container\r\n                    direction=\"row\"\r\n                    justify=\"flex-end\"\r\n                    alignItems=\"flex-end\"\r\n                  >\r\n                    <Grid item xs>\r\n                      <Button\r\n                        href=\"#text-buttons\"\r\n                        style={{\r\n                          textTransform: \"none\",\r\n                          padding: \"5px 20px \",\r\n                          textAlign: \"center\",\r\n                          fontSize: \"15px\",\r\n                        }}\r\n                        color=\"primary\"\r\n                      >\r\n                        Sign in instead\r\n                      </Button>\r\n                    </Grid>\r\n                    <Grid item xs>\r\n                      <Grid\r\n                        container\r\n                        direction=\"row\"\r\n                        justify=\"flex-end\"\r\n                        alignItems=\"flex-end\"\r\n                      >\r\n                        <button\r\n                          className=\"btn btn-primary\"\r\n                          style={{\r\n                            padding: \"5px 25px 8px \",\r\n                            fontSize: \"15px\",\r\n                            textAlign: \"center\",\r\n                          }}\r\n                        >\r\n                          Next\r\n                        </button>\r\n                      </Grid>\r\n                    </Grid>\r\n                  </Grid>\r\n                </Grid>\r\n              </Grid>\r\n            </Grid>\r\n            <Hidden smDown>\r\n              <Grid item xs={12} sm={6} md={6} lg={6} xl={6}>\r\n                <Grid container align=\"center\" className={margin}>\r\n                  <Grid item xs>\r\n                    <img src={AccountLogo} alt=\"\" width={250} />\r\n                    <label>\r\n                      One account. All of Google <br />\r\n                      working for you.\r\n                    </label>\r\n                  </Grid>\r\n                </Grid>\r\n              </Grid>\r\n            </Hidden>\r\n          </Grid>\r\n        </form>\r\n      </Paper>\r\n    </Container>\r\n  );\r\n};\r\nRegisterForm.propTypes = {\r\n  width: PropTypes.oneOf([\"lg\", \"md\", \"sm\", \"xl\", \"xs\"]).isRequired,\r\n};\r\n\r\nexport default withWidth()(RegisterForm);\r\n","import React, { useState } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core\";\r\nimport Input from \"./input\";\r\nexport const Form = (initialFieldValues) => {\r\n  const [values, setValues] = useState(initialFieldValues);\r\n\r\n  const handleInputChange = ({ currentTarget: input }) => {\r\n    const { name, value } = input;\r\n    setValues({\r\n      ...values,\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    console.log(\"Submitted\");\r\n  };\r\n\r\n  const handleClickShowPassword = () => {\r\n    setValues({ ...values, showPassword: !values.showPassword });\r\n  };\r\n\r\n  const handleMouseDownPassword = (event) => {\r\n    event.preventDefault();\r\n  };\r\n\r\n  const renderInput = (id, name, label, type, helperText) => {\r\n    return (\r\n      <Input\r\n        id={id}\r\n        name={name}\r\n        label={label}\r\n        type={type}\r\n        helperText={helperText}\r\n        value={values[name]}\r\n        onChange={handleInputChange}\r\n      />\r\n    );\r\n  };\r\n\r\n  return {\r\n    values,\r\n    setValues,\r\n    handleInputChange,\r\n    handleSubmit,\r\n    handleClickShowPassword,\r\n    handleMouseDownPassword,\r\n    renderInput,\r\n  };\r\n};\r\n\r\nexport const UseStyle = () => {\r\n  const useStyles = makeStyles((theme) => ({\r\n    root: {\r\n      flexGrow: 1,\r\n      // margin: theme.spacing(3),\r\n      display: \"flex\",\r\n      flexWrap: \"wrap\",\r\n      padding: theme.spacing(5),\r\n\r\n      width: \"100%\",\r\n    },\r\n    margin: {\r\n      margin: theme.spacing(2),\r\n    },\r\n    marginBottom: {\r\n      marginBottom: theme.spacing(4),\r\n    },\r\n    marginLogo: {\r\n      marginBottom: theme.spacing(2),\r\n    },\r\n  }));\r\n\r\n  const classes = useStyles();\r\n\r\n  return classes;\r\n};\r\n","import React from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport RegisterForm from \"./components/registerForm\"\n// import Paper from \"@material-ui/core/Paper\";\n// import { makeStyles } from '@material-ui/core/styles';\nimport Grid from \"@material-ui/core/Grid\";\n\n\nconst warningTitleCSS =\n  \"color:red; font-size:50px; font-weight: bold; -webkit-text-stroke: 1px black;\";\nfunction App() {\n\n  return (\n    <Grid container\n      direction=\"row\"\n      justify=\"center\"\n      alignItems=\"center\"\n      style={{ minHeight: '100vh' }\n        // spacing={5}\n      }>\n      {setTimeout(\n        console.log.bind(console, \"%c#Amr Ahmed\", warningTitleCSS),\n        0\n      )}\n      <RegisterForm />\n    </Grid >);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}